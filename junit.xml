<testsuites name="jest tests">
  <testsuite name="/src/components/tabs/Tabs.test.js" errors="0" failures="0" skipped="0" timestamp="2018-01-19T01:33:33" time="0.876" tests="1">
    <testcase classname="Tabs-renders without crashing" name="Tabs-renders without crashing" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="/src/components/button/toggle/ButtonToggle.test.js" errors="0" failures="0" skipped="0" timestamp="2018-01-19T01:33:33" time="0.906" tests="7">
    <testcase classname="ButtonToggle-renders without crashing" name="ButtonToggle-renders without crashing" time="0.02">
    </testcase>
    <testcase classname="ButtonToggle â€º initial states-toggled should be false" name="ButtonToggle â€º initial states-toggled should be false" time="0.003">
    </testcase>
    <testcase classname="ButtonToggle â€º initial states-active icon should be fa fa-toggle-on" name="ButtonToggle â€º initial states-active icon should be fa fa-toggle-on" time="0.001">
    </testcase>
    <testcase classname="ButtonToggle â€º initial states-inactive icon should be fa fa-toggle-off" name="ButtonToggle â€º initial states-inactive icon should be fa fa-toggle-off" time="0.001">
    </testcase>
    <testcase classname="ButtonToggle â€º render-should toggle the button after click" name="ButtonToggle â€º render-should toggle the button after click" time="0.009">
    </testcase>
    <testcase classname="ButtonToggle â€º render-should call the handler function after the click" name="ButtonToggle â€º render-should call the handler function after the click" time="0.002">
    </testcase>
    <testcase classname="ButtonToggle â€º render-should have a span with the given text inside the button" name="ButtonToggle â€º render-should have a span with the given text inside the button" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="/src/components/input/text/InputText.test.js" errors="0" failures="0" skipped="0" timestamp="2018-01-19T01:33:33" time="0.935" tests="1">
    <testcase classname="InputText-renders without crashing" name="InputText-renders without crashing" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="/src/components/button/remove/ButtonRemove.test.js" errors="0" failures="0" skipped="0" timestamp="2018-01-19T01:33:33" time="0.892" tests="2">
    <testcase classname="ButtonRemove-renders without crashing" name="ButtonRemove-renders without crashing" time="0.011">
    </testcase>
    <testcase classname="ButtonRemove â€º âš™ actions-should call the onClick function after the click" name="ButtonRemove â€º âš™ actions-should call the onClick function after the click" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="/src/components/dropdown/Dropdown.test.js" errors="0" failures="0" skipped="0" timestamp="2018-01-19T01:33:34" time="0.109" tests="1">
    <testcase classname="Dropdown-renders without crashing" name="Dropdown-renders without crashing" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="/src/service/series/SeriesRepository.test.js" errors="0" failures="0" skipped="5" timestamp="2018-01-19T01:33:33" time="1.153" tests="5">
    <testcase classname="SeriesRepository-random id ðŸŽ‰  should get no series" name="SeriesRepository-random id ðŸŽ‰  should get no series" time="0.001">
      <skipped/>
    </testcase>
    <testcase classname="SeriesRepository-empty id ðŸŽ‰  should get no series" name="SeriesRepository-empty id ðŸŽ‰  should get no series" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SeriesRepository-null ðŸŽ‰  should get no series" name="SeriesRepository-null ðŸŽ‰  should get no series" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SeriesRepository-id and value given ðŸŽ‰  should add a series" name="SeriesRepository-id and value given ðŸŽ‰  should add a series" time="0">
      <skipped/>
    </testcase>
    <testcase classname="SeriesRepository-id and value null ðŸŽ‰  should throw exception" name="SeriesRepository-id and value null ðŸŽ‰  should throw exception" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="/src/service/api/Moviedb.test.js" errors="0" failures="0" skipped="0" timestamp="2018-01-19T01:33:33" time="2.383" tests="6">
    <testcase classname="MovieDatabase-should find the walking dead in the database" name="MovieDatabase-should find the walking dead in the database" time="0.531">
    </testcase>
    <testcase classname="MovieDatabase-should find the walking dead by id in the database" name="MovieDatabase-should find the walking dead by id in the database" time="0.119">
    </testcase>
    <testcase classname="MovieDatabase-should find the walking dead season 1 by id in the database" name="MovieDatabase-should find the walking dead season 1 by id in the database" time="0.121">
    </testcase>
    <testcase classname="MovieDatabase-should find complete the walking dead by id in the database" name="MovieDatabase-should find complete the walking dead by id in the database" time="0.65">
    </testcase>
    <testcase classname="MovieDatabase â€º rest api returns null as value-should call the callback with a value that is equal to null" name="MovieDatabase â€º rest api returns null as value-should call the callback with a value that is equal to null" time="0.001">
    </testcase>
    <testcase classname="MovieDatabase â€º rest api returns null as value-should call the setTimeout function when a error was thrown in the promise" name="MovieDatabase â€º rest api returns null as value-should call the setTimeout function when a error was thrown in the promise" time="0">
    </testcase>
  </testsuite>
  <testsuite name="/src/service/firebase/Firebase.test.js" errors="0" failures="0" skipped="2" timestamp="2018-01-19T01:33:33" time="2.648" tests="16">
    <testcase classname="Firebase â€º onAuthStateChanged(object): void â€º user is null-should call localStorage removeItem" name="Firebase â€º onAuthStateChanged(object): void â€º user is null-should call localStorage removeItem" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Firebase â€º onAuthStateChanged(object): void â€º user is not null-should call localStorage setItem" name="Firebase â€º onAuthStateChanged(object): void â€º user is not null-should call localStorage setItem" time="0">
      <skipped/>
    </testcase>
    <testcase classname="Firebase â€º .write(string, value): Promise-should write the value and call the promise" name="Firebase â€º .write(string, value): Promise-should write the value and call the promise" time="0.004">
    </testcase>
    <testcase classname="Firebase â€º .remove(string): Promise â€º node exists-should remove the node and call the promise" name="Firebase â€º .remove(string): Promise â€º node exists-should remove the node and call the promise" time="0.903">
    </testcase>
    <testcase classname="Firebase â€º .remove(string): Promise â€º node exists-should not remove the node and call the promise" name="Firebase â€º .remove(string): Promise â€º node exists-should not remove the node and call the promise" time="0.276">
    </testcase>
    <testcase classname="Firebase â€º .exists(string): Promise â€º node exists-should return promise with true" name="Firebase â€º .exists(string): Promise â€º node exists-should return promise with true" time="0.281">
    </testcase>
    <testcase classname="Firebase â€º .exists(string): Promise â€º node doesn&apos;t exists-should call the promise with false" name="Firebase â€º .exists(string): Promise â€º node doesn&apos;t exists-should call the promise with false" time="0.003">
    </testcase>
    <testcase classname="Firebase â€º get(string): Promise â€º node has value-should find value &quot;myVal&quot; and call promise" name="Firebase â€º get(string): Promise â€º node has value-should find value &quot;myVal&quot; and call promise" time="0.004">
    </testcase>
    <testcase classname="Firebase â€º get(string): Promise â€º node has no value-should find null and call promise" name="Firebase â€º get(string): Promise â€º node has no value-should find null and call promise" time="0.004">
    </testcase>
    <testcase classname="Firebase â€º isLoggedIn(): Boolean â€º user is not logged in-should return false" name="Firebase â€º isLoggedIn(): Boolean â€º user is not logged in-should return false" time="0.002">
    </testcase>
    <testcase classname="Firebase â€º logout()-should call auth.signout" name="Firebase â€º logout()-should call auth.signout" time="0.004">
    </testcase>
    <testcase classname="Firebase â€º getUser() â€º user is not logged in-should return null" name="Firebase â€º getUser() â€º user is not logged in-should return null" time="0.001">
    </testcase>
    <testcase classname="Firebase â€º login(string, string): Promise â€º without email and password-should have error &quot;Your email is not vaild.&quot;" name="Firebase â€º login(string, string): Promise â€º without email and password-should have error &quot;Your email is not vaild.&quot;" time="0.003">
    </testcase>
    <testcase classname="Firebase â€º login(string, string): Promise â€º with email and without password-should have error &quot;Invaild Password.&quot;" name="Firebase â€º login(string, string): Promise â€º with email and without password-should have error &quot;Invaild Password.&quot;" time="0.001">
    </testcase>
    <testcase classname="Firebase â€º createUser(): void â€º without email and password-should have error &quot;Your email is not vaild.&quot;" name="Firebase â€º createUser(): void â€º without email and password-should have error &quot;Your email is not vaild.&quot;" time="0.001">
    </testcase>
    <testcase classname="Firebase â€º createUser(): void â€º with email and without password-should have error &quot;Password is not long enough or not complex enough.&quot;" name="Firebase â€º createUser(): void â€º with email and without password-should have error &quot;Password is not long enough or not complex enough.&quot;" time="0.001">
    </testcase>
  </testsuite>
</testsuites>